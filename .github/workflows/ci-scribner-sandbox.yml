name: CI Scribner Pipeline
# The pipeline is triggered on:
#  - PR to scribner-sandbox (code_quality_checks only)
#  - Push to scribner-sandbox (full cycle)
#  - PR comment "/build-images" (code_quality_checks + build images)
#  - PR comment "/build-pipeline" (code_quality_checks + build kfp pipeline)
# Useless comment: for pretending things changed
on:
  push:
    branches: [scribner-pipeline]
  pull_request:
    branches: [scribner-pipeline]
  issue_comment:
    types: [created]  # Handles /triggers

env:
  ACR_REGISTRY: "k8scc01covidmlopsacr"
  ACR_REPOSITORY: "mlops"

jobs:
  # Pull the git details
  # TODO: Write this to an artifact (so we aren't checking out multiple times, possibly with different results)
  prepare_git:
    runs-on: ubuntu-latest
    # TODO: Remove all if statements here?
    if: contains(github.event.comment.body, '/scribner-build-images') || contains(github.event.comment.body, '/scribner-build-pipeline') || github.event_name != 'issue_comment'
    outputs:
      event_ref: ${{ env.event_ref }}
      event_git_sha: ${{ env.event_git_sha }}
    steps:
      # Get the repo code
      - uses: actions/checkout@v2
        # If a issue_comment, figure out which PR we're talking about and make a event_ref context for others
        # TODO: needs revising.  An issue comment outside a PR will trigger this and run on master
      # Get the relevant sha, regardless of whether we have a comment or pr/push
      - name: Get event ref if Comment
        if: github.event_name == 'issue_comment'
        run: echo "::set-env name=event_ref::+refs/pull/${{ github.event.issue.number }}/merge"
      - name: Get event ref if not Comment
        if: github.event_name != 'issue_comment'
        run: echo "::set-env name=event_ref::${{ github.ref }}"
      #     Check out relevant code
      - if: github.event_name == 'issue_comment'
        name: Checkout PR code
        run: |
          git fetch origin ${{ env.event_ref }}
          git checkout FETCH_HEAD
      - name: Log event SHA for output
        run: echo ::set-env name=event_git_sha::$(git rev-parse HEAD)

  code_quality_checks:
    runs-on: ubuntu-latest
    needs: prepare_git
    if: contains(github.event.comment.body, '/scribner-build-images') || contains(github.event.comment.body, '/scribner-build-pipeline') || github.event_name != 'issue_comment'
    steps:
      # Get the repo code
      - uses: actions/checkout@v2
      #     Check out relevant code
      - if: github.event_name == 'issue_comment'
        name: Checkout PR code
        run: |
          git fetch origin ${{ needs.prepare_git.outputs.event_ref }}
          git checkout FETCH_HEAD
#       apply code checks - skipped for now
      - name: Fake code quality checks
        run: echo not real checks...
#      - uses: TrueBrain/actions-flake8@master
#        if: "true"
#        with:
#          path: "pipeline"
#      - uses: TrueBrain/actions-flake8@master
#        if: "true"
#        with:
#          path: "containers"

  build_images:
    runs-on: ubuntu-latest
    needs: [prepare_git, code_quality_checks]
    # All sub steps use a similar if statement.  I think this pattern is so you could have /build-specific-image?
    # Temp change to events for debugging
    #    if: github.event_name == 'push' || github.event_name == 'issue_comment'
    if: github.event_name == 'push' || github.event_name == 'issue_comment' || github.event_name == 'pull_request'
    steps:
      - name: Build Average Image
#        if: ... <--This existed in template but it was same as above.  Whats up with that?
#                   Think its so you could have /build-specific-image
        # Would be nice if this task returned output of the path to the built image in acr.  Do PR for that in action?
        # Can I add input validation to acr task?  I was calling from a needs.* that I hadn't added to this job and
        # got a non-descript error - i think it happened because the needs.* that wasn't available just shows as "" to
        # the action?
        uses: statcan/actions/acr-task@master  # Pin to version?
        with:
          service_principal: ${{ secrets.SERVICE_PRINCIPAL }}
          service_principal_password: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
          tenant: ${{ secrets.TENANT }}
          registry: ${{ env.ACR_REGISTRY }}
          repository: ${{ env.ACR_REPOSITORY }}
          repository_crds: ${{ secrets.REPOSITORY_CRDS }}
          # If this is empty, it might still work?  If so, maybe update the task to be more clear about that
          # I had a case where code_quality_checks.outputs.event_ref wasn't available so it just passed a blank
          # and the task didn't catch that as bad
          branch: ${{ needs.prepare_git.outputs.event_ref }}
          # Template tagged this with latest, but I think sha makes more sense?  Then do sed to inject in pipeline
          tag: ${{ needs.prepare_git.outputs.event_git_sha }}  # This will default to commit sha anyway
          image: average
          folder: scribner/containers/average

  build_kfp_pipeline_average:
    runs-on: ubuntu-latest
    needs: [prepare_git, code_quality_checks, build_images]
    # DEBUG: Currently firing on PRs as well just for ease of testing
#    if: github.event_name == 'push' || github.event_name == 'issue_comment' && contains(github.event.comment.body, '/scribner-build-pipeline')
    if: github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/scribner-build-pipeline'))
    steps:
      - uses: actions/checkout@v2
#      Why do I need this both above and below checkout?
      - if: github.event_name == 'issue_comment'
        name: Checkout PR code
        run: |
          git fetch origin ${{ needs.prepare_git.outputs.event_ref }}
          git checkout FETCH_HEAD

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install Python dependencies
        # This pip installs the same kfp sdk version as currently used in the platform(?).
        # Pinned to a commit - is that good or bad?  Can't update on is, but we also don't stay in sync if it updates.
        run: |
          pip3 install "git+https://github.com/statcan/pipelines@db46df74bb3d37092d440bb2eb62d9e90b403c81#egg=kfp&subdirectory=sdk/python" adal --upgrade

      - name: Update Pipeline Definition with Pinned Containers
        working-directory: scribner/pipeline
        env:
          PINNED_AVERAGE_CONTAINER_PATH: ${{ env.ACR_REGISTRY }}.azurecr.io/${{ env.ACR_REPOSITORY }}/average:${{ needs.prepare_git.outputs.event_git_sha }}
        # Do this?  Or make input args for all containers in the pipeline and pass that way?
        # Tee for debugging so I know what the result looks like
        # Do a global parameter expansion of the container path because it has slashes that need escaping for sed
        run: |
          echo PINNED_AVERAGE_CONTAINER_PATH is ${PINNED_AVERAGE_CONTAINER_PATH}
          sed -iE 's/^AVERAGE_OP_CONTAINER = .*$/AVERAGE_OP_CONTAINER = "'${PINNED_AVERAGE_CONTAINER_PATH//\//\\/}'"/' build_pipeline_average.py

      - name: Build pipeline
        working-directory: scribner/pipeline
        run: python build_pipeline_average.py
        # Can use later to pass payloads back to issue showing status
        env:
          PR_NUM: ${{ github.event.issue.number }}

      - name: Publish/Upload KF Pipeline
        working-directory: scribner/pipeline
        env:
#          KFP_PIPELINE_NAME: ${{ secrets.KFP_PIPELINE_NAME }}
          KFP_PIPELINE_NAME: scribner-ci-pipeline
          KFP_HOST: ${{ secrets.KFP_HOST }}
          RUN_ID: ${{ github.run_id }}
        # the publish.py could probably be general and run direct from github or something?
        run: |
          export PIPELINE_ID=$(python ../../pipeline/publish.py --run_id $RUN_ID \
                                                          --pipeline_name "$KFP_PIPELINE_NAME" \
                                                          --kfp_host $KFP_HOST \
                                                          --tenant ${{ secrets.tenant }} \
                                                          --service_principal ${{ secrets.SERVICE_PRINCIPAL }} \
                                                          --sp_secret ${{ secrets.SERVICE_PRINCIPAL_PWD }} \
                                                          --sp_audience ${{ secrets.SERVICE_PRINCIPAL_AUDIENCE }} \
                                                          --pipeline_file_path "build_pipeline_average.py.tar.gz" 2>&1 >/dev/null)
          echo "pipeline id: $PIPELINE_ID"
          echo "::set-env name=PUBLISHED_PIPELINE_ID::$PIPELINE_ID"

      - name: Run Pipeline ID
        id: run-pipeline
        working-directory: scribner/pipeline
        # Commented out of run command below:
        #                                  pl_args=`cat pl_args.json`
        #                                         --resource_group ${{ secrets.AML_RESOURCE_GROUP }} \
        #                                         --workspace ${{ secrets.AML_WORKSPACE }} \
        #                                                 --pl_args $pl_args \
        # Capture run link so we can post it as a comment
        run: |
          python run_pipeline_average.py \
                    --kfp_host ${{ secrets.KFP_HOST }} \
                    --pipeline_id $PUBLISHED_PIPELINE_ID \
                    --run_name "${{ secrets.KFP_PIPELINE_NAME }}" \
                    --tenant ${{ secrets.tenant }} \
                    --service_principal ${{ secrets.SERVICE_PRINCIPAL }} \
                    --sp_secret ${{ secrets.SERVICE_PRINCIPAL_PWD }} \
                    --sp_audience ${{ secrets.SERVICE_PRINCIPAL_AUDIENCE }} | tee output.txt
          echo ::set-env name=RUN_LINK3::$(grep "Run link" output.txt | sed -E 's/^Run link: (.*)$/\1/')

      - uses: unsplash/comment-on-pr@master
        name: Comment with Run Link
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: 'Run link: <a href="${{ env.RUN_LINK }}">here</a>'
