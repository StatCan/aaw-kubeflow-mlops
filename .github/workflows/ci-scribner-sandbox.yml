name: CI Scribner Pipeline
# The pipeline is triggered on:
#  - PR to scribner-sandbox (code_quality_checks only)
#  - Push to scribner-sandbox (full cycle)
#  - PR comment "/build-images" (code_quality_checks + build images)
#  - PR comment "/build-pipeline" (code_quality_checks + build kfp pipeline)
on:
  push:
    branches: [scribner-pipeline]
  pull_request:
    branches: [scribner-pipeline]
  issue_comment:
    types: [created]  # Handles /triggers

env:
  ACR_REGISTRY: "k8scc01covidmlopsacr"
  ACR_REPOSITORY: "mlops"  # TODO: Can I change this?

jobs:
  code_quality_checks:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/scribner-build-images') || contains(github.event.comment.body, '/scribner-build-pipeline') || github.event_name != 'issue_comment'
    outputs:
      event_sha: ${{ env.event_sha }}
      event_git_sha: ${{ env.event_git_sha }}
    steps:
      - name: Test echo
        run: echo "Triggered for ${{ github.event_name }} with issue number ${{ github.event.issue.number }}"
      # Get the repo code
      - uses: actions/checkout@v2
      # If a issue_comment, figure out which PR we're talking about and make a event_sha context for others
      # This needs revising.  An issue comment outside a PR will trigger this and run on master
      - name: GetPRSHA
        if: github.event_name == 'issue_comment'
        run: echo "::set-env name=event_sha::+refs/pull/${{ github.event.issue.number }}/merge"
      - name: GetREFSHA
        if: github.event_name != 'issue_comment'
        run: echo "::set-env name=event_sha::${{ github.ref }}"
#     Check out code and save the checked out git sha (if this is a comment, it wont be in github.sha)
      - if: github.event_name == 'issue_comment'
        name: Checkout PR code
        run: |
          git fetch origin ${{ env.event_sha }}
          git checkout FETCH_HEAD
        # Should I do this directly instead of via env?  It doesn't get used in here.
      - name: Log git SHA for output
        run: echo ::set-env name=event_git_sha::$(git rev-parse HEAD)
#       apply code checks - skipped for now
#      - uses: TrueBrain/actions-flake8@master
#        if: "true"
#        with:
#          path: "pipeline"
#      - uses: TrueBrain/actions-flake8@master
#        if: "true"
#        with:
#          path: "containers"

  build_images:
    runs-on: ubuntu-latest
    needs: code_quality_checks
    # All sub steps use a similar if statement.  I think this pattern is so you could have /build-specific-image?
    # Temp change to events for debugging
    #    if: github.event_name == 'push' || github.event_name == 'issue_comment'
    if: github.event_name == 'push' || github.event_name == 'issue_comment' || github.event_name == 'pull_request'
    steps:
      - name: Build Average Image
#        if: ... <--This existed in template but it was same as above.  Whats up with that?
#                   Think its so you could have /build-specific-image
        # Would be nice if this task returned output of the path to the built image in acr.  Do PR for that?
        uses: statcan/actions/acr-task@master  # Pin to version?
        with:
          service_principal: ${{ secrets.SERVICE_PRINCIPAL }}
          service_principal_password: ${{ secrets.SERVICE_PRINCIPAL_PWD }}
          tenant: ${{ secrets.TENANT }}
          registry: ${{ env.ACR_REGISTRY }}
          repository: ${{ env.ACR_REPOSITORY }}
          repository_crds: ${{ secrets.REPOSITORY_CRDS }}
          # If this is empty, it might still work?  If so, maybe update the task to be more clear about that
          # I had a case where code_quality_checks.outputs.event_sha wasn't available so it just passed a blank
          # and the task didn't catch that as bad
          branch: ${{ needs.code_quality_checks.outputs.event_sha }}
          # Template tagged this with latest, but I think sha makes more sense?  Then do sed to inject in pipeline
          tag: ${{ needs.code_quality_checks.outputs.event_git_sha }}  # This will default to commit sha anyway
          image: average
          folder: scribner/containers/average


  build_kfp_pipeline_average:
    runs-on: ubuntu-latest
    needs: [code_quality_checks, build_images]
    # DEBUG: Currently firing on PRs as well just for ease of testing
#    if: github.event_name == 'push' || github.event_name == 'issue_comment' && contains(github.event.comment.body, '/scribner-build-pipeline')
    if: github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/scribner-build-pipeline'))
    steps:
      - uses: actions/checkout@v2
#      Why do I need this both above and below checkout?
      - if: github.event_name == 'issue_comment'
        name: Checkout PR code
        run: |
          git fetch origin ${{ needs.code_quality_checks.outputs.event_sha }}
          git checkout FETCH_HEAD

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install Python dependencies
        # This pip installs the same kfp sdk version as currently used in the platform(?).
        # Pinned to a commit - is that good or bad?  Can't update on is, but we also don't stay in sync if it updates.
        run: |
          pip3 install "git+https://github.com/statcan/pipelines@db46df74bb3d37092d440bb2eb62d9e90b403c81#egg=kfp&subdirectory=sdk/python" adal --upgrade

#      # Look at the workspace interactively
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v2

      - name: Update Pipeline Definition with Pinned Containers
        working-directory: scribner/pipeline
        env:
          PINNED_CONTAINER_PATH: k8scc01covidmlopsacr.azurecr.io/mlops/average:${{ needs.code_quality_checks.outputs.event_git_sha }}
        # Do this?  Or make input args for all containers in the pipeline and pass that way?
        # Tee for debugging so I know what the result looks like
        # Do a global parameter expansion of the container path because it has slashes that need escaping for sed
        run: |
          echo PINNED_CONTAINER_PATH is ${PINNED_CONTAINER_PATH}
          sed -E 's/^AVERAGE_OP_CONTAINER = .*$/AVERAGE_OP_CONTAINER = '${PINNED_CONTAINER_PATH//\//\\/}'/' build_pipeline_average.py > build_pipeline_average.py
          cat build_pipeline_average.py

      # Look at the workspace interactively
      - name: Setup tmate session
        env:
          PINNED_CONTAINER_PATH: k8scc01covidmlopsacr.azurecr.io/mlops/average:${{ needs.code_quality_checks.outputs.event_git_sha }}
        uses: mxschmitt/action-tmate@v2

      - name: Build pipeline
        working-directory: scribner/pipeline
        run: python build_pipeline_average.py
        # Can use later to pass payloads back to issue showing status
        env:
          PR_NUM: ${{ github.event.issue.number }}

      - name: Publish/Upload KF Pipeline
        working-directory: scribner/pipeline
        env:
#          KFP_PIPELINE_NAME: ${{ secrets.KFP_PIPELINE_NAME }}
          KFP_PIPELINE_NAME: scribner-ci-pipeline
          KFP_HOST: ${{ secrets.KFP_HOST }}
          RUN_ID: ${{ github.run_id }}
        # the publish.py could probably be general and run direct from github or something?
        run: |
          export PIPELINE_ID=$(python ../../pipeline/publish.py --run_id $RUN_ID \
                                                          --pipeline_name "$KFP_PIPELINE_NAME" \
                                                          --kfp_host $KFP_HOST \
                                                          --tenant ${{ secrets.tenant }} \
                                                          --service_principal ${{ secrets.SERVICE_PRINCIPAL }} \
                                                          --sp_secret ${{ secrets.SERVICE_PRINCIPAL_PWD }} \
                                                          --sp_audience ${{ secrets.SERVICE_PRINCIPAL_AUDIENCE }} \
                                                          --pipeline_file_path "build_pipeline_average.py.tar.gz" 2>&1 >/dev/null)
          echo "pipeline id: $PIPELINE_ID"
          echo "::set-env name=PUBLISHED_PIPELINE_ID::$PIPELINE_ID"

      # Hacky way to get a JSON string into the args below.  Couldn't get the escaping of quotes to work right from an
      # environment variable
      - uses: schdck/create-env-json@v2
        id: create-env
        with:
          file-name: 'scribner/pipeline/pl_args.json'
          a: 1
          b: 2
          c: 3
          d: 10
          e: 20


      - name: Run Pipeline ID
        working-directory: scribner/pipeline
#        env:
#          PL_ARGS: $'\'{"a": 1, "b": 2, "c": 3, "d": 10, "e": 20}\''
        # Commented out of run command below:
        #                                         --resource_group ${{ secrets.AML_RESOURCE_GROUP }} \
        #                                         --workspace ${{ secrets.AML_WORKSPACE }} \
        run: |
          echo ::set-env name=PL_ARGS::\'{"a": 1, "b": 2, "c": 3, "d": 10, "e": 20}\'

          pwd
          echo `pwd`
          echo $PL_ARGS
          cat pl_args.json
          python run_pipeline_average.py --kfp_host ${{ secrets.KFP_HOST }} \
                                         --pipeline_id $PUBLISHED_PIPELINE_ID \
                                         --run_name "${{ secrets.KFP_PIPELINE_NAME }}" \
                                         --tenant ${{ secrets.tenant }} \
                                         --service_principal ${{ secrets.SERVICE_PRINCIPAL }} \
                                         --sp_secret ${{ secrets.SERVICE_PRINCIPAL_PWD }} \
                                         --sp_audience ${{ secrets.SERVICE_PRINCIPAL_AUDIENCE }} \
                                         --pl_args `cat pl_args.json`
