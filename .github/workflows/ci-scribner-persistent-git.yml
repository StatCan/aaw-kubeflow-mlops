name: Scribner test git as artifact
# The pipeline is triggered on:
#  - PR to scribner-sandbox (code_quality_checks only)
#  - Push to scribner-sandbox (full cycle)
#  - PR comment "/build-images" (code_quality_checks + build images)
#  - PR comment "/build-pipeline" (code_quality_checks + build kfp pipeline)
# Useless comment: for pretending things changed
on:
  push:
    branches: [scribner-pipeline]
  pull_request:
    branches: [scribner-pipeline]
  issue_comment:
    types: [created]  # Handles /triggers

env:
  ACR_REGISTRY: "k8scc01covidmlopsacr"
  ACR_REPOSITORY: "mlops"

jobs:
  # Pull the git details
  # TODO: Write this to an artifact (so we aren't checking out multiple times, possibly with different results)
  prepare_git:
    runs-on: ubuntu-latest
    # TODO: Remove all if statements here?
    if: contains(github.event.comment.body, '/scribner-build-images') || contains(github.event.comment.body, '/scribner-build-pipeline') || github.event_name != 'issue_comment'
    outputs:
      event_ref: ${{ env.event_ref }}
      event_git_sha: ${{ env.event_git_sha }}
    steps:
      # Get the repo code
      - name: Checkout repository
        uses: actions/checkout@v2
        # If a issue_comment, figure out which PR we're talking about and make a event_ref context for others
        # TODO: needs revising.  An issue comment outside a PR will trigger this and run on master
      # Get the relevant sha, regardless of whether we have a comment or pr/push
      - name: Display structure of files
        run: ls -R
      - name: Archive repository
        uses: actions/upload-artifact@v2
        with:
          name: git
          path: .git
      - name: Get event ref if Comment
        if: github.event_name == 'issue_comment'
        run: echo "::set-env name=event_ref::+refs/pull/${{ github.event.issue.number }}/merge"
      - name: Get event ref if not Comment
        if: github.event_name != 'issue_comment'
        run: echo "::set-env name=event_ref::${{ github.ref }}"
      #     Check out relevant code
      - if: github.event_name == 'issue_comment'
        name: Checkout PR code
        run: |
          git fetch origin ${{ env.event_ref }}
          git checkout FETCH_HEAD
      - name: Log event SHA for output
        run: echo ::set-env name=event_git_sha::$(git rev-parse HEAD)

  use_git_from_artifact:
    runs-on: ubuntu-latest
    needs: prepare_git
    steps:
      - name: Get repo code
        uses: actions/download-artifact@v2
        with:
          name: git
          path: .git
      - name: Display structure of downloaded files
        run: ls -R
      - name: Checkout PR code
        run: |
          git fetch origin ${{ needs.prepare_git.outputs.event_ref }}
          git checkout FETCH_HEAD
      - name: Display structure of downloaded files again
        run: ls -R
